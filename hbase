#!/usr/bin/python

#
# A simple HBase plugin for Munin
# 
# Mathias CHOUET 2018/05 - IRD, Cirad
# GPLv3
#

import pwd
import os
import subprocess
import re
import sys

# config
SERIES_CONFIG = {
  'requestsPerSecond': {
    'title': 'HBase requests per second',
    'vlabel': 'count',
    'index': 0
  },
  'usedHeap': {
    'title': 'HBase used memory',
    'vlabel': 'MB',
    'index': 2
  },
  'readRequestsCount': {
    'title': 'HBase total read requests',
    'vlabel': 'count',
    'index': 11
  },
  'writeRequestsCount': {
    'title': 'HBase total write requests',
    'vlabel': 'count',
    'index': 12
  }
}
AVAILABLE_SERIES = SERIES_CONFIG.keys()

# hbase cli path
try:
    HBASE = os.environ['hbasebinary']
except KeyError:
    # defaults to system command
    HBASE = 'hbase'

# which series is requested ?
commandNameParts = sys.argv[0].split('_')
if (len(commandNameParts) > 1):
    SERIES = commandNameParts[len(commandNameParts)-1]
    try:
        AVAILABLE_SERIES.index(SERIES)
    except ValueError:
        print 'unknown series', SERIES, ', available series:', str(AVAILABLE_SERIES)
        sys.exit(1)
else:
    print 'plugin must be a symlink of the form "hbase_SERIESNAME"'
    print 'available series:', str(AVAILABLE_SERIES)
    sys.exit(2)

# load series config
SERIES = SERIES_CONFIG[SERIES]

# config or data ?
CONFIG = (len(sys.argv) > 1 and sys.argv[1] == 'config')

if (CONFIG):
    print '''graph_category hbase
graph_title {title}
graph_vlabel {vlabel}'''.format(title=SERIES['title'], vlabel=SERIES['vlabel'])

# run hbase shell
ps = subprocess.Popen(('echo', 'status \'simple\''), stdout=subprocess.PIPE)
devnull = open(os.devnull, 'w')
output = subprocess.check_output((HBASE, 'shell', '-n'), stdin=ps.stdout, stderr=devnull)
ps.wait()
devnull.close()

# extract live data nodes information
regexp = re.compile('([0-9])+ live servers\n(.+)\n([0-9])+ dead servers\n(.+)', re.MULTILINE | re.IGNORECASE | re.DOTALL)
m = regexp.search(output)

livenodes = m.group(2).split('\n');
i = 0
while i < len(livenodes):
    if (i % 2 == 0):
        name = livenodes[i].split(':')[0].strip()
        safeName = name.replace('.', '_')
        if CONFIG:
            # series configuration
            print '{nname}.label {label}'.format(nname=safeName, label=name)
            print '{nname}.draw LINE1'.format(nname=safeName)
    else:
        if not CONFIG:
            # series data
            stats = livenodes[i].split(', ')
            data = stats[SERIES['index']].strip().split('=')[1]
            print "{nname}.value {ndata}".format(nname=safeName, ndata=data)
    i += 1
